#+TITLE: P1 Simulado 01
#+startup: overview indent
#+OPTIONS: tex:t

Simulado da P1 de um passado remoto.

* Apresente os valores e idente o programa

#+BEGIN_SRC C :results output :tangle p1_simulado01_idente.c
#include <stdio.h>
int main ()
{
int x, i, j;
x = 8;
for (i = 2; i < 5; i++)
{
j= 3;
while (j > 0)
{
x = x+1;
j = j-1;
}
printf( "X : %5d\n", x );
}
printf("- Fim - \n");
return 0;
}
#+END_SRC

Dado o programa acima, não identado, (1) apresente os valores e
formato apresentados como saída. (2) Reescreva o programa acima de
forma identada, ao lado do código, substituindo o =for= pelo comando
=while= e o =while= por um comando =do-while=, gerando as mesmas saídas.

#+begin_src C :tangle P1-Simulado01-apresente.c
/*
1. Valores de Saída

X :    11
X :    14
X :    17
- Fim -
*/

// 2.
#include <stdio.h>
int main() {
    int x, i, j;
    x = 8;

    i = 2;
    while (i < 5) {
        j = 3;

        do {
            x = x + 1;
            j = j - 1;
        } while (j > 0);

        printf("X : %5d\n", x);
        i++;
    }

    printf("- Fim - \n");
    return 0;
}
#+end_src

* Maior subsequência

Algoritmo e programa para identificar a maior subsequência de números
0 ou 1. Por exemplo, para a sequência

#+BEGIN_SRC bash
0 0 1 1 0 1 0 1 0 0 1 1 1 0 0 0 0 0 1 0 1 0
#+END_SRC

Deve ter como saída:
- Posição 13
- Tamanho 5
- Sequência ~0 0 0 0 0~

#+begin_src C :tangle P1-Simulado01-maior_subsequencia.c
#include <stdio.h>

#define TAM_SEQUENCIA 22

int main() {
    int sequencia[TAM_SEQUENCIA];
    int anterior = -1, tamanho= 0, maior = 0, inicio = 0, inicioMaior = 0, lidos = 0;

    printf("Digite uma seguencia de %d valores 0 ou 1: ", TAM_SEQUENCIA);

    while (lidos < TAM_SEQUENCIA) {
        lidos += scanf("%d", &sequencia[lidos]);
    }
    

    for (int i = 0; i < TAM_SEQUENCIA; i++) {
        if (sequencia[i] == anterior) {
            tamanho++;
        } else {
            if (tamanho > maior) {
                inicioMaior = inicio;
                maior = tamanho;
            }

            inicio = i;
            tamanho = 1;
            anterior = sequencia[i];
        }
    }

    printf("Posicao: %d\n", inicioMaior);
    printf("Tamanho: %d\n", maior);
    printf("Sequencia: ");

    for (int i = 0; i < maior; i++) {
        printf("%d ", sequencia[inicioMaior]);
    }

    return 0;
}
#+end_src

* Número perfeito

Faça um programa que identifica se um número inteiro qualquer é um
número perfeito. Número perfeito é aquele cuja soma de seus divisores,
exceto ele próprio, é igual ao número. O programa recebe um inteiro
como entrada e fornece como saída uma mensagem dizendo se é perfeito
ou não. Para identificar se é divisor use o resto da divisao: ~numero %
divisor == 0~

#+begin_src C :tangle P1-Simulado01-numero_perfeito.c
#include <stdio.h>

int main() {
    int entrada;
    int maiorDivisor;
    int acumulador = 0, lidos;

    printf("Digite um numero inteiro: ");
    lidos = scanf("%d", &entrada);

    if (lidos != 1) {
        printf("Erro ao ler entradas\n");
        return 1;
    }

    maiorDivisor = entrada / 2;

    for (int i = 1; i <= maiorDivisor; i++) {
        if (entrada % i == 0) {
            acumulador += i;
        }
    }

    if (acumulador == entrada) {
        printf("O numero %d eh perfeito", entrada);
    } else {
        printf("O numero %d nao eh perfeito", entrada);
    }

    return 0;
}
#+end_src

* Permutação circular

Dadas duas palavras (cadeia de caracteres) com no máximo 15
caracteres, verificar se uma é a permutação circular da outra, não
importando se os caracteres individuais são maiúsculos ou
minúsculos. Para se obter a permutação circular de uma cadeia,
transfere-se o primeiro caracter do início para o fim da mesma, o
segundo caracter para a primeira posição e assim sucessivamente. Por
exemplo, para a palavra AMORA, a permutação circular é MORAA.

Exemplo de uso #1

#+BEGIN_EXAMPLE
Entre com a primeira palavra: Amora
Entre com a segunda palavra: Moraa
A segunda palavra eh permutação circular da primeira!
#+END_EXAMPLE

Exemplo de uso #2

#+BEGIN_EXAMPLE
Entre com a primeira palavra: Casa
Entre com a segunda palavra: AMOR
A segunda palavra nao eh permutação circular da primeira!
#+END_EXAMPLE

#+begin_src C :tangle P1-Simulado01-permutacao.c
#include <stdio.h>
#include <string.h>
#include <ctype.h>


#define TAM_MAX 16

int main() {
    char p1[TAM_MAX], p2[TAM_MAX];
    int tamanho, ehPermutacao = 0, rotacoes = 1;

    printf("Entre com a primeira palavra: ");
    fgets(p1, TAM_MAX, stdin);

    printf("Entre com a segunda palavra: ");
    fgets(p2, TAM_MAX, stdin);

    if (strlen(p1) != strlen(p2)) {
        printf("Entradas invalidas \n");
        return 1;
    }

    // Remover \n
    tamanho = strlen(p1) - 1;
    p1[tamanho] = '\0';
    p2[tamanho] = '\0';

    for (int i = 0; i < tamanho; i++) {
        p1[i] = tolower(p1[i]);
        p2[i] = tolower(p2[i]);
    }

    while (!ehPermutacao && rotacoes < tamanho) {
        for (int letra = 0; letra < tamanho; letra++) {
            if (p1[letra] == p2[letra + rotacoes]) {
                ehPermutacao++;
            }
        }

        if (ehPermutacao == tamanho) {
            ehPermutacao = 0;
        }

        rotacoes++;
    }

    if (ehPermutacao) {
        printf("A segunda palavra eh permutacao circular da primeira!");
    } else {
        printf("A segunda palavra nao eh permutacao circular da primeira!");
    }

    return 0;
}
#+end_src

* Classifica números

Faça um programa que lê um conjunto de 20 valores inteiros e os
armazena em 2 vetores conforme forem pares ou ímpares. Imprima o vetor
com os elementos pares e em seguida aquele com os elementos
ímpares. Cuide para imprimir somente os elementos válidos destes
vetores. Lembre-se que o usuário tem liberdade de escolha para os 20
números, eles podem inclusive serem todos pares ou ímpares.

Abaixo exemplo de execução:

#+BEGIN_EXAMPLE
Entre com os 20 valores:
12 33 1 9 87 44 2 32 14 126 3 13 21 22 4 66 7 18 11 20
Elementos do array com valores pares:
12 44 2 32 14 126 22 4 66 18 20
Elementos do array com valores impares:
33 1 9 87 3 13 21 7 11
#+END_EXAMPLE

#+begin_src C :tangle P1-Simulado01-classifica.c
#include <stdio.h>

#define TAM 20

int main() {
    int pares[TAM], impares[TAM], qtd_pares = 0, valor, lidos = 0, lido;

    printf("Entre com %d valores: \n", TAM);

    while (lidos < TAM) {
        lido = scanf("%d", &valor);

        if (lido) {
            if (valor % 2 == 0) {
                pares[qtd_pares] = valor;
                qtd_pares++;
            } else {
                impares[lidos - qtd_pares] = valor;
            }
        }

        lidos++;
    }

    printf("Elementos do array com valores pares: \n");
    for (int i = 0; i < qtd_pares; i++) {
        printf("%d ", pares[i]);
    }

    printf("\nElementos do array com valores impares: \n");
    for (int i = 0; i < TAM - qtd_pares; i++) {
        printf("%d ", impares[i]);
    }

    return 0;
}
#+end_src

* Cálculo do somatório

Fazer um programa que leia o valor de X no intervalo (-0.5,0.75) e de
Y no intervalo [-1,1] e calcule e imprima na tela o resultado do
somatório abaixo. Faça consistência dos valores de entrada.

#+begin_html
\[
S = \frac{X^{25} * Y^{1}}{1} + \frac{X^{24} * Y^{2}}{2} + ... + \frac{X^{2} * Y^{24}}{24} + \frac{X^{1} * Y^{25}}{25}
\]
#+end_html

#+begin_src C :tangle P1-Simulado01-somatorio.c
#include <stdio.h>
#include <math.h>

#define MIN_X -0.5
#define MAX_X 0.75

#define MIN_Y -1
#define MAX_Y 1

#define LIMITE 25

int main() {
    float x, y, s = 0, lidos = 0;

    printf("Digite um valor para x (%.2f, %.2f): ", MIN_X, MAX_X);
    lidos += scanf("%f", &x);

    printf("Digite um valor para y [%d, %d]: ", MIN_Y, MAX_Y);
    lidos += scanf("%f", &y);

    if (x <= MIN_X || x >= MAX_X || y < MIN_Y || y > MAX_Y || lidos != 2) {
        printf("Entradas invalidas. \n");

        return 1;
    }

    for (int i = 1; i <= LIMITE; i++) {
        s += pow(x, LIMITE - i + 1) * pow(y, i) / i;
    }

    printf("Valor do somatorio: %f", s);

    return 0;
}
#+end_src
